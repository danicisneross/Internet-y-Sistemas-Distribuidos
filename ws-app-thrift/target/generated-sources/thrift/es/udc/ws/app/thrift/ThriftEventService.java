/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package es.udc.ws.app.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2023-01-29")
public class ThriftEventService {

  public interface Iface {

    public ThriftEventDto registerEvent(ThriftEventDto eventDto) throws ThriftInputValidationException, org.apache.thrift.TException;

    public java.util.List<ThriftEventDto> findEventsByKeyword(java.lang.String keywords, java.lang.String endDate) throws org.apache.thrift.TException;

    public ThriftEventDto findEvent(long eventId) throws ThriftInstanceNotFoundException, org.apache.thrift.TException;

    public ThriftResponseDto answerEvent(long eventId, java.lang.String userEmail, boolean assistance) throws ThriftInstanceNotFoundException, ThriftInputValidationException, ThriftEventAlreadyCanceled, ThriftExistAnsweredForEvent, ThriftDateResponseExpiration, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void registerEvent(ThriftEventDto eventDto, org.apache.thrift.async.AsyncMethodCallback<ThriftEventDto> resultHandler) throws org.apache.thrift.TException;

    public void findEventsByKeyword(java.lang.String keywords, java.lang.String endDate, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftEventDto>> resultHandler) throws org.apache.thrift.TException;

    public void findEvent(long eventId, org.apache.thrift.async.AsyncMethodCallback<ThriftEventDto> resultHandler) throws org.apache.thrift.TException;

    public void answerEvent(long eventId, java.lang.String userEmail, boolean assistance, org.apache.thrift.async.AsyncMethodCallback<ThriftResponseDto> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ThriftEventDto registerEvent(ThriftEventDto eventDto) throws ThriftInputValidationException, org.apache.thrift.TException
    {
      send_registerEvent(eventDto);
      return recv_registerEvent();
    }

    public void send_registerEvent(ThriftEventDto eventDto) throws org.apache.thrift.TException
    {
      registerEvent_args args = new registerEvent_args();
      args.setEventDto(eventDto);
      sendBase("registerEvent", args);
    }

    public ThriftEventDto recv_registerEvent() throws ThriftInputValidationException, org.apache.thrift.TException
    {
      registerEvent_result result = new registerEvent_result();
      receiveBase(result, "registerEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerEvent failed: unknown result");
    }

    public java.util.List<ThriftEventDto> findEventsByKeyword(java.lang.String keywords, java.lang.String endDate) throws org.apache.thrift.TException
    {
      send_findEventsByKeyword(keywords, endDate);
      return recv_findEventsByKeyword();
    }

    public void send_findEventsByKeyword(java.lang.String keywords, java.lang.String endDate) throws org.apache.thrift.TException
    {
      findEventsByKeyword_args args = new findEventsByKeyword_args();
      args.setKeywords(keywords);
      args.setEndDate(endDate);
      sendBase("findEventsByKeyword", args);
    }

    public java.util.List<ThriftEventDto> recv_findEventsByKeyword() throws org.apache.thrift.TException
    {
      findEventsByKeyword_result result = new findEventsByKeyword_result();
      receiveBase(result, "findEventsByKeyword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findEventsByKeyword failed: unknown result");
    }

    public ThriftEventDto findEvent(long eventId) throws ThriftInstanceNotFoundException, org.apache.thrift.TException
    {
      send_findEvent(eventId);
      return recv_findEvent();
    }

    public void send_findEvent(long eventId) throws org.apache.thrift.TException
    {
      findEvent_args args = new findEvent_args();
      args.setEventId(eventId);
      sendBase("findEvent", args);
    }

    public ThriftEventDto recv_findEvent() throws ThriftInstanceNotFoundException, org.apache.thrift.TException
    {
      findEvent_result result = new findEvent_result();
      receiveBase(result, "findEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findEvent failed: unknown result");
    }

    public ThriftResponseDto answerEvent(long eventId, java.lang.String userEmail, boolean assistance) throws ThriftInstanceNotFoundException, ThriftInputValidationException, ThriftEventAlreadyCanceled, ThriftExistAnsweredForEvent, ThriftDateResponseExpiration, org.apache.thrift.TException
    {
      send_answerEvent(eventId, userEmail, assistance);
      return recv_answerEvent();
    }

    public void send_answerEvent(long eventId, java.lang.String userEmail, boolean assistance) throws org.apache.thrift.TException
    {
      answerEvent_args args = new answerEvent_args();
      args.setEventId(eventId);
      args.setUserEmail(userEmail);
      args.setAssistance(assistance);
      sendBase("answerEvent", args);
    }

    public ThriftResponseDto recv_answerEvent() throws ThriftInstanceNotFoundException, ThriftInputValidationException, ThriftEventAlreadyCanceled, ThriftExistAnsweredForEvent, ThriftDateResponseExpiration, org.apache.thrift.TException
    {
      answerEvent_result result = new answerEvent_result();
      receiveBase(result, "answerEvent");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      if (result.ee != null) {
        throw result.ee;
      }
      if (result.eee != null) {
        throw result.eee;
      }
      if (result.eeee != null) {
        throw result.eeee;
      }
      if (result.eeeee != null) {
        throw result.eeeee;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "answerEvent failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void registerEvent(ThriftEventDto eventDto, org.apache.thrift.async.AsyncMethodCallback<ThriftEventDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerEvent_call method_call = new registerEvent_call(eventDto, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerEvent_call extends org.apache.thrift.async.TAsyncMethodCall<ThriftEventDto> {
      private ThriftEventDto eventDto;
      public registerEvent_call(ThriftEventDto eventDto, org.apache.thrift.async.AsyncMethodCallback<ThriftEventDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventDto = eventDto;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerEvent_args args = new registerEvent_args();
        args.setEventDto(eventDto);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ThriftEventDto getResult() throws ThriftInputValidationException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerEvent();
      }
    }

    public void findEventsByKeyword(java.lang.String keywords, java.lang.String endDate, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftEventDto>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findEventsByKeyword_call method_call = new findEventsByKeyword_call(keywords, endDate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findEventsByKeyword_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<ThriftEventDto>> {
      private java.lang.String keywords;
      private java.lang.String endDate;
      public findEventsByKeyword_call(java.lang.String keywords, java.lang.String endDate, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftEventDto>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keywords = keywords;
        this.endDate = endDate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findEventsByKeyword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findEventsByKeyword_args args = new findEventsByKeyword_args();
        args.setKeywords(keywords);
        args.setEndDate(endDate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<ThriftEventDto> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findEventsByKeyword();
      }
    }

    public void findEvent(long eventId, org.apache.thrift.async.AsyncMethodCallback<ThriftEventDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findEvent_call method_call = new findEvent_call(eventId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findEvent_call extends org.apache.thrift.async.TAsyncMethodCall<ThriftEventDto> {
      private long eventId;
      public findEvent_call(long eventId, org.apache.thrift.async.AsyncMethodCallback<ThriftEventDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventId = eventId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findEvent_args args = new findEvent_args();
        args.setEventId(eventId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ThriftEventDto getResult() throws ThriftInstanceNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findEvent();
      }
    }

    public void answerEvent(long eventId, java.lang.String userEmail, boolean assistance, org.apache.thrift.async.AsyncMethodCallback<ThriftResponseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      answerEvent_call method_call = new answerEvent_call(eventId, userEmail, assistance, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class answerEvent_call extends org.apache.thrift.async.TAsyncMethodCall<ThriftResponseDto> {
      private long eventId;
      private java.lang.String userEmail;
      private boolean assistance;
      public answerEvent_call(long eventId, java.lang.String userEmail, boolean assistance, org.apache.thrift.async.AsyncMethodCallback<ThriftResponseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.eventId = eventId;
        this.userEmail = userEmail;
        this.assistance = assistance;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("answerEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        answerEvent_args args = new answerEvent_args();
        args.setEventId(eventId);
        args.setUserEmail(userEmail);
        args.setAssistance(assistance);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ThriftResponseDto getResult() throws ThriftInstanceNotFoundException, ThriftInputValidationException, ThriftEventAlreadyCanceled, ThriftExistAnsweredForEvent, ThriftDateResponseExpiration, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_answerEvent();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("registerEvent", new registerEvent());
      processMap.put("findEventsByKeyword", new findEventsByKeyword());
      processMap.put("findEvent", new findEvent());
      processMap.put("answerEvent", new answerEvent());
      return processMap;
    }

    public static class registerEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerEvent_args> {
      public registerEvent() {
        super("registerEvent");
      }

      public registerEvent_args getEmptyArgsInstance() {
        return new registerEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public registerEvent_result getResult(I iface, registerEvent_args args) throws org.apache.thrift.TException {
        registerEvent_result result = new registerEvent_result();
        try {
          result.success = iface.registerEvent(args.eventDto);
        } catch (ThriftInputValidationException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class findEventsByKeyword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findEventsByKeyword_args> {
      public findEventsByKeyword() {
        super("findEventsByKeyword");
      }

      public findEventsByKeyword_args getEmptyArgsInstance() {
        return new findEventsByKeyword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public findEventsByKeyword_result getResult(I iface, findEventsByKeyword_args args) throws org.apache.thrift.TException {
        findEventsByKeyword_result result = new findEventsByKeyword_result();
        result.success = iface.findEventsByKeyword(args.keywords, args.endDate);
        return result;
      }
    }

    public static class findEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findEvent_args> {
      public findEvent() {
        super("findEvent");
      }

      public findEvent_args getEmptyArgsInstance() {
        return new findEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public findEvent_result getResult(I iface, findEvent_args args) throws org.apache.thrift.TException {
        findEvent_result result = new findEvent_result();
        try {
          result.success = iface.findEvent(args.eventId);
        } catch (ThriftInstanceNotFoundException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class answerEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, answerEvent_args> {
      public answerEvent() {
        super("answerEvent");
      }

      public answerEvent_args getEmptyArgsInstance() {
        return new answerEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public answerEvent_result getResult(I iface, answerEvent_args args) throws org.apache.thrift.TException {
        answerEvent_result result = new answerEvent_result();
        try {
          result.success = iface.answerEvent(args.eventId, args.userEmail, args.assistance);
        } catch (ThriftInstanceNotFoundException e) {
          result.e = e;
        } catch (ThriftInputValidationException ee) {
          result.ee = ee;
        } catch (ThriftEventAlreadyCanceled eee) {
          result.eee = eee;
        } catch (ThriftExistAnsweredForEvent eeee) {
          result.eeee = eeee;
        } catch (ThriftDateResponseExpiration eeeee) {
          result.eeeee = eeeee;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("registerEvent", new registerEvent());
      processMap.put("findEventsByKeyword", new findEventsByKeyword());
      processMap.put("findEvent", new findEvent());
      processMap.put("answerEvent", new answerEvent());
      return processMap;
    }

    public static class registerEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerEvent_args, ThriftEventDto> {
      public registerEvent() {
        super("registerEvent");
      }

      public registerEvent_args getEmptyArgsInstance() {
        return new registerEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ThriftEventDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ThriftEventDto>() { 
          public void onComplete(ThriftEventDto o) {
            registerEvent_result result = new registerEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            registerEvent_result result = new registerEvent_result();
            if (e instanceof ThriftInputValidationException) {
              result.e = (ThriftInputValidationException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerEvent_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftEventDto> resultHandler) throws org.apache.thrift.TException {
        iface.registerEvent(args.eventDto,resultHandler);
      }
    }

    public static class findEventsByKeyword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findEventsByKeyword_args, java.util.List<ThriftEventDto>> {
      public findEventsByKeyword() {
        super("findEventsByKeyword");
      }

      public findEventsByKeyword_args getEmptyArgsInstance() {
        return new findEventsByKeyword_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftEventDto>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftEventDto>>() { 
          public void onComplete(java.util.List<ThriftEventDto> o) {
            findEventsByKeyword_result result = new findEventsByKeyword_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findEventsByKeyword_result result = new findEventsByKeyword_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findEventsByKeyword_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<ThriftEventDto>> resultHandler) throws org.apache.thrift.TException {
        iface.findEventsByKeyword(args.keywords, args.endDate,resultHandler);
      }
    }

    public static class findEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findEvent_args, ThriftEventDto> {
      public findEvent() {
        super("findEvent");
      }

      public findEvent_args getEmptyArgsInstance() {
        return new findEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ThriftEventDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ThriftEventDto>() { 
          public void onComplete(ThriftEventDto o) {
            findEvent_result result = new findEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findEvent_result result = new findEvent_result();
            if (e instanceof ThriftInstanceNotFoundException) {
              result.e = (ThriftInstanceNotFoundException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findEvent_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftEventDto> resultHandler) throws org.apache.thrift.TException {
        iface.findEvent(args.eventId,resultHandler);
      }
    }

    public static class answerEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, answerEvent_args, ThriftResponseDto> {
      public answerEvent() {
        super("answerEvent");
      }

      public answerEvent_args getEmptyArgsInstance() {
        return new answerEvent_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ThriftResponseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ThriftResponseDto>() { 
          public void onComplete(ThriftResponseDto o) {
            answerEvent_result result = new answerEvent_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            answerEvent_result result = new answerEvent_result();
            if (e instanceof ThriftInstanceNotFoundException) {
              result.e = (ThriftInstanceNotFoundException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof ThriftInputValidationException) {
              result.ee = (ThriftInputValidationException) e;
              result.setEeIsSet(true);
              msg = result;
            } else if (e instanceof ThriftEventAlreadyCanceled) {
              result.eee = (ThriftEventAlreadyCanceled) e;
              result.setEeeIsSet(true);
              msg = result;
            } else if (e instanceof ThriftExistAnsweredForEvent) {
              result.eeee = (ThriftExistAnsweredForEvent) e;
              result.setEeeeIsSet(true);
              msg = result;
            } else if (e instanceof ThriftDateResponseExpiration) {
              result.eeeee = (ThriftDateResponseExpiration) e;
              result.setEeeeeIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, answerEvent_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftResponseDto> resultHandler) throws org.apache.thrift.TException {
        iface.answerEvent(args.eventId, args.userEmail, args.assistance,resultHandler);
      }
    }

  }

  public static class registerEvent_args implements org.apache.thrift.TBase<registerEvent_args, registerEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerEvent_args");

    private static final org.apache.thrift.protocol.TField EVENT_DTO_FIELD_DESC = new org.apache.thrift.protocol.TField("eventDto", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerEvent_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ThriftEventDto eventDto; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_DTO((short)1, "eventDto");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_DTO
            return EVENT_DTO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_DTO, new org.apache.thrift.meta_data.FieldMetaData("eventDto", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftEventDto.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerEvent_args.class, metaDataMap);
    }

    public registerEvent_args() {
    }

    public registerEvent_args(
      ThriftEventDto eventDto)
    {
      this();
      this.eventDto = eventDto;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerEvent_args(registerEvent_args other) {
      if (other.isSetEventDto()) {
        this.eventDto = new ThriftEventDto(other.eventDto);
      }
    }

    public registerEvent_args deepCopy() {
      return new registerEvent_args(this);
    }

    @Override
    public void clear() {
      this.eventDto = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftEventDto getEventDto() {
      return this.eventDto;
    }

    public registerEvent_args setEventDto(@org.apache.thrift.annotation.Nullable ThriftEventDto eventDto) {
      this.eventDto = eventDto;
      return this;
    }

    public void unsetEventDto() {
      this.eventDto = null;
    }

    /** Returns true if field eventDto is set (has been assigned a value) and false otherwise */
    public boolean isSetEventDto() {
      return this.eventDto != null;
    }

    public void setEventDtoIsSet(boolean value) {
      if (!value) {
        this.eventDto = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EVENT_DTO:
        if (value == null) {
          unsetEventDto();
        } else {
          setEventDto((ThriftEventDto)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_DTO:
        return getEventDto();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EVENT_DTO:
        return isSetEventDto();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof registerEvent_args)
        return this.equals((registerEvent_args)that);
      return false;
    }

    public boolean equals(registerEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_eventDto = true && this.isSetEventDto();
      boolean that_present_eventDto = true && that.isSetEventDto();
      if (this_present_eventDto || that_present_eventDto) {
        if (!(this_present_eventDto && that_present_eventDto))
          return false;
        if (!this.eventDto.equals(that.eventDto))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEventDto()) ? 131071 : 524287);
      if (isSetEventDto())
        hashCode = hashCode * 8191 + eventDto.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registerEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetEventDto(), other.isSetEventDto());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventDto()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventDto, other.eventDto);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerEvent_args(");
      boolean first = true;

      sb.append("eventDto:");
      if (this.eventDto == null) {
        sb.append("null");
      } else {
        sb.append(this.eventDto);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (eventDto != null) {
        eventDto.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerEvent_argsStandardScheme getScheme() {
        return new registerEvent_argsStandardScheme();
      }
    }

    private static class registerEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_DTO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eventDto = new ThriftEventDto();
                struct.eventDto.read(iprot);
                struct.setEventDtoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.eventDto != null) {
          oprot.writeFieldBegin(EVENT_DTO_FIELD_DESC);
          struct.eventDto.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerEvent_argsTupleScheme getScheme() {
        return new registerEvent_argsTupleScheme();
      }
    }

    private static class registerEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEventDto()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEventDto()) {
          struct.eventDto.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eventDto = new ThriftEventDto();
          struct.eventDto.read(iprot);
          struct.setEventDtoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registerEvent_result implements org.apache.thrift.TBase<registerEvent_result, registerEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerEvent_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ThriftEventDto success; // required
    public @org.apache.thrift.annotation.Nullable ThriftInputValidationException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftEventDto.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftInputValidationException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerEvent_result.class, metaDataMap);
    }

    public registerEvent_result() {
    }

    public registerEvent_result(
      ThriftEventDto success,
      ThriftInputValidationException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerEvent_result(registerEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftEventDto(other.success);
      }
      if (other.isSetE()) {
        this.e = new ThriftInputValidationException(other.e);
      }
    }

    public registerEvent_result deepCopy() {
      return new registerEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftEventDto getSuccess() {
      return this.success;
    }

    public registerEvent_result setSuccess(@org.apache.thrift.annotation.Nullable ThriftEventDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftInputValidationException getE() {
      return this.e;
    }

    public registerEvent_result setE(@org.apache.thrift.annotation.Nullable ThriftInputValidationException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftEventDto)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ThriftInputValidationException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof registerEvent_result)
        return this.equals((registerEvent_result)that);
      return false;
    }

    public boolean equals(registerEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registerEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerEvent_resultStandardScheme getScheme() {
        return new registerEvent_resultStandardScheme();
      }
    }

    private static class registerEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftEventDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ThriftInputValidationException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerEvent_resultTupleScheme getScheme() {
        return new registerEvent_resultTupleScheme();
      }
    }

    private static class registerEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ThriftEventDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ThriftInputValidationException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findEventsByKeyword_args implements org.apache.thrift.TBase<findEventsByKeyword_args, findEventsByKeyword_args._Fields>, java.io.Serializable, Cloneable, Comparable<findEventsByKeyword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findEventsByKeyword_args");

    private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findEventsByKeyword_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findEventsByKeyword_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String keywords; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String endDate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEYWORDS((short)1, "keywords"),
      END_DATE((short)2, "endDate");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEYWORDS
            return KEYWORDS;
          case 2: // END_DATE
            return END_DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findEventsByKeyword_args.class, metaDataMap);
    }

    public findEventsByKeyword_args() {
    }

    public findEventsByKeyword_args(
      java.lang.String keywords,
      java.lang.String endDate)
    {
      this();
      this.keywords = keywords;
      this.endDate = endDate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findEventsByKeyword_args(findEventsByKeyword_args other) {
      if (other.isSetKeywords()) {
        this.keywords = other.keywords;
      }
      if (other.isSetEndDate()) {
        this.endDate = other.endDate;
      }
    }

    public findEventsByKeyword_args deepCopy() {
      return new findEventsByKeyword_args(this);
    }

    @Override
    public void clear() {
      this.keywords = null;
      this.endDate = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getKeywords() {
      return this.keywords;
    }

    public findEventsByKeyword_args setKeywords(@org.apache.thrift.annotation.Nullable java.lang.String keywords) {
      this.keywords = keywords;
      return this;
    }

    public void unsetKeywords() {
      this.keywords = null;
    }

    /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
    public boolean isSetKeywords() {
      return this.keywords != null;
    }

    public void setKeywordsIsSet(boolean value) {
      if (!value) {
        this.keywords = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getEndDate() {
      return this.endDate;
    }

    public findEventsByKeyword_args setEndDate(@org.apache.thrift.annotation.Nullable java.lang.String endDate) {
      this.endDate = endDate;
      return this;
    }

    public void unsetEndDate() {
      this.endDate = null;
    }

    /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
    public boolean isSetEndDate() {
      return this.endDate != null;
    }

    public void setEndDateIsSet(boolean value) {
      if (!value) {
        this.endDate = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case KEYWORDS:
        if (value == null) {
          unsetKeywords();
        } else {
          setKeywords((java.lang.String)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEndDate();
        } else {
          setEndDate((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case KEYWORDS:
        return getKeywords();

      case END_DATE:
        return getEndDate();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case KEYWORDS:
        return isSetKeywords();
      case END_DATE:
        return isSetEndDate();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof findEventsByKeyword_args)
        return this.equals((findEventsByKeyword_args)that);
      return false;
    }

    public boolean equals(findEventsByKeyword_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_keywords = true && this.isSetKeywords();
      boolean that_present_keywords = true && that.isSetKeywords();
      if (this_present_keywords || that_present_keywords) {
        if (!(this_present_keywords && that_present_keywords))
          return false;
        if (!this.keywords.equals(that.keywords))
          return false;
      }

      boolean this_present_endDate = true && this.isSetEndDate();
      boolean that_present_endDate = true && that.isSetEndDate();
      if (this_present_endDate || that_present_endDate) {
        if (!(this_present_endDate && that_present_endDate))
          return false;
        if (!this.endDate.equals(that.endDate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetKeywords()) ? 131071 : 524287);
      if (isSetKeywords())
        hashCode = hashCode * 8191 + keywords.hashCode();

      hashCode = hashCode * 8191 + ((isSetEndDate()) ? 131071 : 524287);
      if (isSetEndDate())
        hashCode = hashCode * 8191 + endDate.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findEventsByKeyword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetKeywords(), other.isSetKeywords());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeywords()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, other.keywords);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEndDate(), other.isSetEndDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findEventsByKeyword_args(");
      boolean first = true;

      sb.append("keywords:");
      if (this.keywords == null) {
        sb.append("null");
      } else {
        sb.append(this.keywords);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endDate:");
      if (this.endDate == null) {
        sb.append("null");
      } else {
        sb.append(this.endDate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findEventsByKeyword_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findEventsByKeyword_argsStandardScheme getScheme() {
        return new findEventsByKeyword_argsStandardScheme();
      }
    }

    private static class findEventsByKeyword_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findEventsByKeyword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findEventsByKeyword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEYWORDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keywords = iprot.readString();
                struct.setKeywordsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.endDate = iprot.readString();
                struct.setEndDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findEventsByKeyword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.keywords != null) {
          oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
          oprot.writeString(struct.keywords);
          oprot.writeFieldEnd();
        }
        if (struct.endDate != null) {
          oprot.writeFieldBegin(END_DATE_FIELD_DESC);
          oprot.writeString(struct.endDate);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findEventsByKeyword_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findEventsByKeyword_argsTupleScheme getScheme() {
        return new findEventsByKeyword_argsTupleScheme();
      }
    }

    private static class findEventsByKeyword_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findEventsByKeyword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findEventsByKeyword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetKeywords()) {
          optionals.set(0);
        }
        if (struct.isSetEndDate()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetKeywords()) {
          oprot.writeString(struct.keywords);
        }
        if (struct.isSetEndDate()) {
          oprot.writeString(struct.endDate);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findEventsByKeyword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.keywords = iprot.readString();
          struct.setKeywordsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.endDate = iprot.readString();
          struct.setEndDateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findEventsByKeyword_result implements org.apache.thrift.TBase<findEventsByKeyword_result, findEventsByKeyword_result._Fields>, java.io.Serializable, Cloneable, Comparable<findEventsByKeyword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findEventsByKeyword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findEventsByKeyword_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findEventsByKeyword_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<ThriftEventDto> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftEventDto.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findEventsByKeyword_result.class, metaDataMap);
    }

    public findEventsByKeyword_result() {
    }

    public findEventsByKeyword_result(
      java.util.List<ThriftEventDto> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findEventsByKeyword_result(findEventsByKeyword_result other) {
      if (other.isSetSuccess()) {
        java.util.List<ThriftEventDto> __this__success = new java.util.ArrayList<ThriftEventDto>(other.success.size());
        for (ThriftEventDto other_element : other.success) {
          __this__success.add(new ThriftEventDto(other_element));
        }
        this.success = __this__success;
      }
    }

    public findEventsByKeyword_result deepCopy() {
      return new findEventsByKeyword_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<ThriftEventDto> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftEventDto elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<ThriftEventDto>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<ThriftEventDto> getSuccess() {
      return this.success;
    }

    public findEventsByKeyword_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<ThriftEventDto> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<ThriftEventDto>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof findEventsByKeyword_result)
        return this.equals((findEventsByKeyword_result)that);
      return false;
    }

    public boolean equals(findEventsByKeyword_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findEventsByKeyword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findEventsByKeyword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findEventsByKeyword_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findEventsByKeyword_resultStandardScheme getScheme() {
        return new findEventsByKeyword_resultStandardScheme();
      }
    }

    private static class findEventsByKeyword_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findEventsByKeyword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findEventsByKeyword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<ThriftEventDto>(_list0.size);
                  @org.apache.thrift.annotation.Nullable ThriftEventDto _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new ThriftEventDto();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findEventsByKeyword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftEventDto _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findEventsByKeyword_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findEventsByKeyword_resultTupleScheme getScheme() {
        return new findEventsByKeyword_resultTupleScheme();
      }
    }

    private static class findEventsByKeyword_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findEventsByKeyword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findEventsByKeyword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftEventDto _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findEventsByKeyword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.success = new java.util.ArrayList<ThriftEventDto>(_list5.size);
            @org.apache.thrift.annotation.Nullable ThriftEventDto _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new ThriftEventDto();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findEvent_args implements org.apache.thrift.TBase<findEvent_args, findEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<findEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findEvent_args");

    private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findEvent_argsTupleSchemeFactory();

    public long eventId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_ID((short)1, "eventId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_ID
            return EVENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EVENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findEvent_args.class, metaDataMap);
    }

    public findEvent_args() {
    }

    public findEvent_args(
      long eventId)
    {
      this();
      this.eventId = eventId;
      setEventIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findEvent_args(findEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.eventId = other.eventId;
    }

    public findEvent_args deepCopy() {
      return new findEvent_args(this);
    }

    @Override
    public void clear() {
      setEventIdIsSet(false);
      this.eventId = 0;
    }

    public long getEventId() {
      return this.eventId;
    }

    public findEvent_args setEventId(long eventId) {
      this.eventId = eventId;
      setEventIdIsSet(true);
      return this;
    }

    public void unsetEventId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EVENTID_ISSET_ID);
    }

    /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
    public boolean isSetEventId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EVENTID_ISSET_ID);
    }

    public void setEventIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EVENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EVENT_ID:
        if (value == null) {
          unsetEventId();
        } else {
          setEventId((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_ID:
        return getEventId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EVENT_ID:
        return isSetEventId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof findEvent_args)
        return this.equals((findEvent_args)that);
      return false;
    }

    public boolean equals(findEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_eventId = true;
      boolean that_present_eventId = true;
      if (this_present_eventId || that_present_eventId) {
        if (!(this_present_eventId && that_present_eventId))
          return false;
        if (this.eventId != that.eventId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(eventId);

      return hashCode;
    }

    @Override
    public int compareTo(findEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetEventId(), other.isSetEventId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, other.eventId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findEvent_args(");
      boolean first = true;

      sb.append("eventId:");
      sb.append(this.eventId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findEvent_argsStandardScheme getScheme() {
        return new findEvent_argsStandardScheme();
      }
    }

    private static class findEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.eventId = iprot.readI64();
                struct.setEventIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
        oprot.writeI64(struct.eventId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findEvent_argsTupleScheme getScheme() {
        return new findEvent_argsTupleScheme();
      }
    }

    private static class findEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEventId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEventId()) {
          oprot.writeI64(struct.eventId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.eventId = iprot.readI64();
          struct.setEventIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class findEvent_result implements org.apache.thrift.TBase<findEvent_result, findEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<findEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findEvent_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ThriftEventDto success; // required
    public @org.apache.thrift.annotation.Nullable ThriftInstanceNotFoundException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftEventDto.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftInstanceNotFoundException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findEvent_result.class, metaDataMap);
    }

    public findEvent_result() {
    }

    public findEvent_result(
      ThriftEventDto success,
      ThriftInstanceNotFoundException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findEvent_result(findEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftEventDto(other.success);
      }
      if (other.isSetE()) {
        this.e = new ThriftInstanceNotFoundException(other.e);
      }
    }

    public findEvent_result deepCopy() {
      return new findEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftEventDto getSuccess() {
      return this.success;
    }

    public findEvent_result setSuccess(@org.apache.thrift.annotation.Nullable ThriftEventDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftInstanceNotFoundException getE() {
      return this.e;
    }

    public findEvent_result setE(@org.apache.thrift.annotation.Nullable ThriftInstanceNotFoundException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftEventDto)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ThriftInstanceNotFoundException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof findEvent_result)
        return this.equals((findEvent_result)that);
      return false;
    }

    public boolean equals(findEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findEvent_resultStandardScheme getScheme() {
        return new findEvent_resultStandardScheme();
      }
    }

    private static class findEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftEventDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ThriftInstanceNotFoundException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public findEvent_resultTupleScheme getScheme() {
        return new findEvent_resultTupleScheme();
      }
    }

    private static class findEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ThriftEventDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ThriftInstanceNotFoundException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class answerEvent_args implements org.apache.thrift.TBase<answerEvent_args, answerEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<answerEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("answerEvent_args");

    private static final org.apache.thrift.protocol.TField EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("eventId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField USER_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("userEmail", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ASSISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("assistance", org.apache.thrift.protocol.TType.BOOL, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new answerEvent_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new answerEvent_argsTupleSchemeFactory();

    public long eventId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String userEmail; // required
    public boolean assistance; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EVENT_ID((short)1, "eventId"),
      USER_EMAIL((short)2, "userEmail"),
      ASSISTANCE((short)3, "assistance");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EVENT_ID
            return EVENT_ID;
          case 2: // USER_EMAIL
            return USER_EMAIL;
          case 3: // ASSISTANCE
            return ASSISTANCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EVENTID_ISSET_ID = 0;
    private static final int __ASSISTANCE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("eventId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.USER_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("userEmail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ASSISTANCE, new org.apache.thrift.meta_data.FieldMetaData("assistance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(answerEvent_args.class, metaDataMap);
    }

    public answerEvent_args() {
    }

    public answerEvent_args(
      long eventId,
      java.lang.String userEmail,
      boolean assistance)
    {
      this();
      this.eventId = eventId;
      setEventIdIsSet(true);
      this.userEmail = userEmail;
      this.assistance = assistance;
      setAssistanceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public answerEvent_args(answerEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.eventId = other.eventId;
      if (other.isSetUserEmail()) {
        this.userEmail = other.userEmail;
      }
      this.assistance = other.assistance;
    }

    public answerEvent_args deepCopy() {
      return new answerEvent_args(this);
    }

    @Override
    public void clear() {
      setEventIdIsSet(false);
      this.eventId = 0;
      this.userEmail = null;
      setAssistanceIsSet(false);
      this.assistance = false;
    }

    public long getEventId() {
      return this.eventId;
    }

    public answerEvent_args setEventId(long eventId) {
      this.eventId = eventId;
      setEventIdIsSet(true);
      return this;
    }

    public void unsetEventId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EVENTID_ISSET_ID);
    }

    /** Returns true if field eventId is set (has been assigned a value) and false otherwise */
    public boolean isSetEventId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EVENTID_ISSET_ID);
    }

    public void setEventIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EVENTID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUserEmail() {
      return this.userEmail;
    }

    public answerEvent_args setUserEmail(@org.apache.thrift.annotation.Nullable java.lang.String userEmail) {
      this.userEmail = userEmail;
      return this;
    }

    public void unsetUserEmail() {
      this.userEmail = null;
    }

    /** Returns true if field userEmail is set (has been assigned a value) and false otherwise */
    public boolean isSetUserEmail() {
      return this.userEmail != null;
    }

    public void setUserEmailIsSet(boolean value) {
      if (!value) {
        this.userEmail = null;
      }
    }

    public boolean isAssistance() {
      return this.assistance;
    }

    public answerEvent_args setAssistance(boolean assistance) {
      this.assistance = assistance;
      setAssistanceIsSet(true);
      return this;
    }

    public void unsetAssistance() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ASSISTANCE_ISSET_ID);
    }

    /** Returns true if field assistance is set (has been assigned a value) and false otherwise */
    public boolean isSetAssistance() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ASSISTANCE_ISSET_ID);
    }

    public void setAssistanceIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ASSISTANCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EVENT_ID:
        if (value == null) {
          unsetEventId();
        } else {
          setEventId((java.lang.Long)value);
        }
        break;

      case USER_EMAIL:
        if (value == null) {
          unsetUserEmail();
        } else {
          setUserEmail((java.lang.String)value);
        }
        break;

      case ASSISTANCE:
        if (value == null) {
          unsetAssistance();
        } else {
          setAssistance((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EVENT_ID:
        return getEventId();

      case USER_EMAIL:
        return getUserEmail();

      case ASSISTANCE:
        return isAssistance();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EVENT_ID:
        return isSetEventId();
      case USER_EMAIL:
        return isSetUserEmail();
      case ASSISTANCE:
        return isSetAssistance();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof answerEvent_args)
        return this.equals((answerEvent_args)that);
      return false;
    }

    public boolean equals(answerEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_eventId = true;
      boolean that_present_eventId = true;
      if (this_present_eventId || that_present_eventId) {
        if (!(this_present_eventId && that_present_eventId))
          return false;
        if (this.eventId != that.eventId)
          return false;
      }

      boolean this_present_userEmail = true && this.isSetUserEmail();
      boolean that_present_userEmail = true && that.isSetUserEmail();
      if (this_present_userEmail || that_present_userEmail) {
        if (!(this_present_userEmail && that_present_userEmail))
          return false;
        if (!this.userEmail.equals(that.userEmail))
          return false;
      }

      boolean this_present_assistance = true;
      boolean that_present_assistance = true;
      if (this_present_assistance || that_present_assistance) {
        if (!(this_present_assistance && that_present_assistance))
          return false;
        if (this.assistance != that.assistance)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(eventId);

      hashCode = hashCode * 8191 + ((isSetUserEmail()) ? 131071 : 524287);
      if (isSetUserEmail())
        hashCode = hashCode * 8191 + userEmail.hashCode();

      hashCode = hashCode * 8191 + ((assistance) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(answerEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetEventId(), other.isSetEventId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEventId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventId, other.eventId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUserEmail(), other.isSetUserEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userEmail, other.userEmail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetAssistance(), other.isSetAssistance());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAssistance()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assistance, other.assistance);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("answerEvent_args(");
      boolean first = true;

      sb.append("eventId:");
      sb.append(this.eventId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userEmail:");
      if (this.userEmail == null) {
        sb.append("null");
      } else {
        sb.append(this.userEmail);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("assistance:");
      sb.append(this.assistance);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class answerEvent_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerEvent_argsStandardScheme getScheme() {
        return new answerEvent_argsStandardScheme();
      }
    }

    private static class answerEvent_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<answerEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, answerEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EVENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.eventId = iprot.readI64();
                struct.setEventIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userEmail = iprot.readString();
                struct.setUserEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ASSISTANCE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.assistance = iprot.readBool();
                struct.setAssistanceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, answerEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(EVENT_ID_FIELD_DESC);
        oprot.writeI64(struct.eventId);
        oprot.writeFieldEnd();
        if (struct.userEmail != null) {
          oprot.writeFieldBegin(USER_EMAIL_FIELD_DESC);
          oprot.writeString(struct.userEmail);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ASSISTANCE_FIELD_DESC);
        oprot.writeBool(struct.assistance);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class answerEvent_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerEvent_argsTupleScheme getScheme() {
        return new answerEvent_argsTupleScheme();
      }
    }

    private static class answerEvent_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<answerEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, answerEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEventId()) {
          optionals.set(0);
        }
        if (struct.isSetUserEmail()) {
          optionals.set(1);
        }
        if (struct.isSetAssistance()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetEventId()) {
          oprot.writeI64(struct.eventId);
        }
        if (struct.isSetUserEmail()) {
          oprot.writeString(struct.userEmail);
        }
        if (struct.isSetAssistance()) {
          oprot.writeBool(struct.assistance);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, answerEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.eventId = iprot.readI64();
          struct.setEventIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userEmail = iprot.readString();
          struct.setUserEmailIsSet(true);
        }
        if (incoming.get(2)) {
          struct.assistance = iprot.readBool();
          struct.setAssistanceIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class answerEvent_result implements org.apache.thrift.TBase<answerEvent_result, answerEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<answerEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("answerEvent_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EE_FIELD_DESC = new org.apache.thrift.protocol.TField("ee", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField EEE_FIELD_DESC = new org.apache.thrift.protocol.TField("eee", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField EEEE_FIELD_DESC = new org.apache.thrift.protocol.TField("eeee", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField EEEEE_FIELD_DESC = new org.apache.thrift.protocol.TField("eeeee", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new answerEvent_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new answerEvent_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ThriftResponseDto success; // required
    public @org.apache.thrift.annotation.Nullable ThriftInstanceNotFoundException e; // required
    public @org.apache.thrift.annotation.Nullable ThriftInputValidationException ee; // required
    public @org.apache.thrift.annotation.Nullable ThriftEventAlreadyCanceled eee; // required
    public @org.apache.thrift.annotation.Nullable ThriftExistAnsweredForEvent eeee; // required
    public @org.apache.thrift.annotation.Nullable ThriftDateResponseExpiration eeeee; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e"),
      EE((short)2, "ee"),
      EEE((short)3, "eee"),
      EEEE((short)4, "eeee"),
      EEEEE((short)5, "eeeee");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          case 2: // EE
            return EE;
          case 3: // EEE
            return EEE;
          case 4: // EEEE
            return EEEE;
          case 5: // EEEEE
            return EEEEE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftResponseDto.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftInstanceNotFoundException.class)));
      tmpMap.put(_Fields.EE, new org.apache.thrift.meta_data.FieldMetaData("ee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftInputValidationException.class)));
      tmpMap.put(_Fields.EEE, new org.apache.thrift.meta_data.FieldMetaData("eee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftEventAlreadyCanceled.class)));
      tmpMap.put(_Fields.EEEE, new org.apache.thrift.meta_data.FieldMetaData("eeee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftExistAnsweredForEvent.class)));
      tmpMap.put(_Fields.EEEEE, new org.apache.thrift.meta_data.FieldMetaData("eeeee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftDateResponseExpiration.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(answerEvent_result.class, metaDataMap);
    }

    public answerEvent_result() {
    }

    public answerEvent_result(
      ThriftResponseDto success,
      ThriftInstanceNotFoundException e,
      ThriftInputValidationException ee,
      ThriftEventAlreadyCanceled eee,
      ThriftExistAnsweredForEvent eeee,
      ThriftDateResponseExpiration eeeee)
    {
      this();
      this.success = success;
      this.e = e;
      this.ee = ee;
      this.eee = eee;
      this.eeee = eeee;
      this.eeeee = eeeee;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public answerEvent_result(answerEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftResponseDto(other.success);
      }
      if (other.isSetE()) {
        this.e = new ThriftInstanceNotFoundException(other.e);
      }
      if (other.isSetEe()) {
        this.ee = new ThriftInputValidationException(other.ee);
      }
      if (other.isSetEee()) {
        this.eee = new ThriftEventAlreadyCanceled(other.eee);
      }
      if (other.isSetEeee()) {
        this.eeee = new ThriftExistAnsweredForEvent(other.eeee);
      }
      if (other.isSetEeeee()) {
        this.eeeee = new ThriftDateResponseExpiration(other.eeeee);
      }
    }

    public answerEvent_result deepCopy() {
      return new answerEvent_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
      this.ee = null;
      this.eee = null;
      this.eeee = null;
      this.eeeee = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftResponseDto getSuccess() {
      return this.success;
    }

    public answerEvent_result setSuccess(@org.apache.thrift.annotation.Nullable ThriftResponseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftInstanceNotFoundException getE() {
      return this.e;
    }

    public answerEvent_result setE(@org.apache.thrift.annotation.Nullable ThriftInstanceNotFoundException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftInputValidationException getEe() {
      return this.ee;
    }

    public answerEvent_result setEe(@org.apache.thrift.annotation.Nullable ThriftInputValidationException ee) {
      this.ee = ee;
      return this;
    }

    public void unsetEe() {
      this.ee = null;
    }

    /** Returns true if field ee is set (has been assigned a value) and false otherwise */
    public boolean isSetEe() {
      return this.ee != null;
    }

    public void setEeIsSet(boolean value) {
      if (!value) {
        this.ee = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftEventAlreadyCanceled getEee() {
      return this.eee;
    }

    public answerEvent_result setEee(@org.apache.thrift.annotation.Nullable ThriftEventAlreadyCanceled eee) {
      this.eee = eee;
      return this;
    }

    public void unsetEee() {
      this.eee = null;
    }

    /** Returns true if field eee is set (has been assigned a value) and false otherwise */
    public boolean isSetEee() {
      return this.eee != null;
    }

    public void setEeeIsSet(boolean value) {
      if (!value) {
        this.eee = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftExistAnsweredForEvent getEeee() {
      return this.eeee;
    }

    public answerEvent_result setEeee(@org.apache.thrift.annotation.Nullable ThriftExistAnsweredForEvent eeee) {
      this.eeee = eeee;
      return this;
    }

    public void unsetEeee() {
      this.eeee = null;
    }

    /** Returns true if field eeee is set (has been assigned a value) and false otherwise */
    public boolean isSetEeee() {
      return this.eeee != null;
    }

    public void setEeeeIsSet(boolean value) {
      if (!value) {
        this.eeee = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftDateResponseExpiration getEeeee() {
      return this.eeeee;
    }

    public answerEvent_result setEeeee(@org.apache.thrift.annotation.Nullable ThriftDateResponseExpiration eeeee) {
      this.eeeee = eeeee;
      return this;
    }

    public void unsetEeeee() {
      this.eeeee = null;
    }

    /** Returns true if field eeeee is set (has been assigned a value) and false otherwise */
    public boolean isSetEeeee() {
      return this.eeeee != null;
    }

    public void setEeeeeIsSet(boolean value) {
      if (!value) {
        this.eeeee = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftResponseDto)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ThriftInstanceNotFoundException)value);
        }
        break;

      case EE:
        if (value == null) {
          unsetEe();
        } else {
          setEe((ThriftInputValidationException)value);
        }
        break;

      case EEE:
        if (value == null) {
          unsetEee();
        } else {
          setEee((ThriftEventAlreadyCanceled)value);
        }
        break;

      case EEEE:
        if (value == null) {
          unsetEeee();
        } else {
          setEeee((ThriftExistAnsweredForEvent)value);
        }
        break;

      case EEEEE:
        if (value == null) {
          unsetEeeee();
        } else {
          setEeeee((ThriftDateResponseExpiration)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      case EE:
        return getEe();

      case EEE:
        return getEee();

      case EEEE:
        return getEeee();

      case EEEEE:
        return getEeeee();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      case EE:
        return isSetEe();
      case EEE:
        return isSetEee();
      case EEEE:
        return isSetEeee();
      case EEEEE:
        return isSetEeeee();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof answerEvent_result)
        return this.equals((answerEvent_result)that);
      return false;
    }

    public boolean equals(answerEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      boolean this_present_ee = true && this.isSetEe();
      boolean that_present_ee = true && that.isSetEe();
      if (this_present_ee || that_present_ee) {
        if (!(this_present_ee && that_present_ee))
          return false;
        if (!this.ee.equals(that.ee))
          return false;
      }

      boolean this_present_eee = true && this.isSetEee();
      boolean that_present_eee = true && that.isSetEee();
      if (this_present_eee || that_present_eee) {
        if (!(this_present_eee && that_present_eee))
          return false;
        if (!this.eee.equals(that.eee))
          return false;
      }

      boolean this_present_eeee = true && this.isSetEeee();
      boolean that_present_eeee = true && that.isSetEeee();
      if (this_present_eeee || that_present_eeee) {
        if (!(this_present_eeee && that_present_eeee))
          return false;
        if (!this.eeee.equals(that.eeee))
          return false;
      }

      boolean this_present_eeeee = true && this.isSetEeeee();
      boolean that_present_eeeee = true && that.isSetEeeee();
      if (this_present_eeeee || that_present_eeeee) {
        if (!(this_present_eeeee && that_present_eeeee))
          return false;
        if (!this.eeeee.equals(that.eeeee))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      hashCode = hashCode * 8191 + ((isSetEe()) ? 131071 : 524287);
      if (isSetEe())
        hashCode = hashCode * 8191 + ee.hashCode();

      hashCode = hashCode * 8191 + ((isSetEee()) ? 131071 : 524287);
      if (isSetEee())
        hashCode = hashCode * 8191 + eee.hashCode();

      hashCode = hashCode * 8191 + ((isSetEeee()) ? 131071 : 524287);
      if (isSetEeee())
        hashCode = hashCode * 8191 + eeee.hashCode();

      hashCode = hashCode * 8191 + ((isSetEeeee()) ? 131071 : 524287);
      if (isSetEeeee())
        hashCode = hashCode * 8191 + eeeee.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(answerEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEe(), other.isSetEe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ee, other.ee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEee(), other.isSetEee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eee, other.eee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEeee(), other.isSetEeee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEeee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eeee, other.eeee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEeeee(), other.isSetEeeee());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEeeee()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eeeee, other.eeeee);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("answerEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ee:");
      if (this.ee == null) {
        sb.append("null");
      } else {
        sb.append(this.ee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eee:");
      if (this.eee == null) {
        sb.append("null");
      } else {
        sb.append(this.eee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eeee:");
      if (this.eeee == null) {
        sb.append("null");
      } else {
        sb.append(this.eeee);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("eeeee:");
      if (this.eeeee == null) {
        sb.append("null");
      } else {
        sb.append(this.eeeee);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class answerEvent_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerEvent_resultStandardScheme getScheme() {
        return new answerEvent_resultStandardScheme();
      }
    }

    private static class answerEvent_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<answerEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, answerEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftResponseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ThriftInstanceNotFoundException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ee = new ThriftInputValidationException();
                struct.ee.read(iprot);
                struct.setEeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eee = new ThriftEventAlreadyCanceled();
                struct.eee.read(iprot);
                struct.setEeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // EEEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eeee = new ThriftExistAnsweredForEvent();
                struct.eeee.read(iprot);
                struct.setEeeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EEEEE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.eeeee = new ThriftDateResponseExpiration();
                struct.eeeee.read(iprot);
                struct.setEeeeeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, answerEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ee != null) {
          oprot.writeFieldBegin(EE_FIELD_DESC);
          struct.ee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eee != null) {
          oprot.writeFieldBegin(EEE_FIELD_DESC);
          struct.eee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eeee != null) {
          oprot.writeFieldBegin(EEEE_FIELD_DESC);
          struct.eeee.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.eeeee != null) {
          oprot.writeFieldBegin(EEEEE_FIELD_DESC);
          struct.eeeee.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class answerEvent_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public answerEvent_resultTupleScheme getScheme() {
        return new answerEvent_resultTupleScheme();
      }
    }

    private static class answerEvent_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<answerEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, answerEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        if (struct.isSetEe()) {
          optionals.set(2);
        }
        if (struct.isSetEee()) {
          optionals.set(3);
        }
        if (struct.isSetEeee()) {
          optionals.set(4);
        }
        if (struct.isSetEeeee()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
        if (struct.isSetEe()) {
          struct.ee.write(oprot);
        }
        if (struct.isSetEee()) {
          struct.eee.write(oprot);
        }
        if (struct.isSetEeee()) {
          struct.eeee.write(oprot);
        }
        if (struct.isSetEeeee()) {
          struct.eeeee.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, answerEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.success = new ThriftResponseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ThriftInstanceNotFoundException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ee = new ThriftInputValidationException();
          struct.ee.read(iprot);
          struct.setEeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.eee = new ThriftEventAlreadyCanceled();
          struct.eee.read(iprot);
          struct.setEeeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.eeee = new ThriftExistAnsweredForEvent();
          struct.eeee.read(iprot);
          struct.setEeeeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.eeeee = new ThriftDateResponseExpiration();
          struct.eeeee.read(iprot);
          struct.setEeeeeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
